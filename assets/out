#!/bin/sh
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

access_token=$(jq -r '.source.access_token // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
box=$(jq -r '.source.box // ""' < $payload)
provider=$(jq -r '.source.provider // ""' < $payload)
version=$(jq -r '.params.version // ""' < $payload)
description=$(jq -r '.params.description // ""' < $payload)
url=$(jq -r '.params.url // ""' < $payload)
release=$(jq -r '.params.release // false' < $payload)

abort() {
  echo "$@"
  exit 1
}

[ -n "$access_token" ] || abort "missing access_token"
[ -n "$username" ] || abort "missing username"
[ -n "$box" ] || abort "missing box"
[ -n "$provider" ] || abort "missing provider"
[ -n "$version" ] || abort "missing version"
[[ -z "$url" && "$release" = "false" ]] && abort "must provide url or release"

cd $source

token_param="access_token=${access_token}"

description_payload="null"
if [ -n "$description" ]; then
  description_payload=$(cat $description | jq -s -R .)
fi

version_payload=$(
  jq -n "{
    version: {
      version: $(cat $version | jq -R .),
      description: ${description_payload}
    }
  }"
)

echo "checking for existing version..."
curl -f -s -X GET https://vagrantcloud.com/api/v1/box/${username}/${box}?${token_param} > box.json

existing_version=$(jq -r "
  .versions |
    select(.version == $(cat $version | jq -R .)) |
    .version
" < box.json)

if [ -z "$existing_version" ]; then
  echo "none found; creating..."
  curl -s -f -X POST -H "Content-Type: application/json" https://vagrantcloud.com/api/v1/box/${username}/${box}/versions?${token_param} \
    -d "$version_payload" > version.json
else
  echo "version found; updating..."
  curl -s -f -X PUT -H "Content-Type: application/json" https://vagrantcloud.com/api/v1/box/${username}/${box}/version/${version}?${token_param} \
    -d "$version_payload" > version.json
fi

version=$(jq .version < version.json)
status=$(jq -r .status < version.json)

if [ -n "$url" ]; then
  provider_payload=$(
    jq -n "{
      provider: {
        name: $(echo $provider | jq -R .),
        url: $(cat $url | jq -s -R .)
      }
    }"
  )

  echo 'publishing provider...'
  {
    curl -s -f -X POST -H "Content-Type: application/json" https://vagrantcloud.com/api/v1/box/${username}/${box}/version/${version}/providers?${token_param} \
      -d "$provider_payload" || \
    curl -s -f -X PUT -H "Content-Type: application/json" https://vagrantcloud.com/api/v1/box/${username}/${box}/version/${version}/provider/${provider}?${token_param} \
      -d "$provider_payload"
  } > provider.json
fi

if [ "$release" = "true" ]; then
  case $status in
  unreleased)
    curl -s -f -X PUT https://vagrantcloud.com/api/v1/box/${username}/${box}/version/${version}/release?${token_param} >/dev/null
    echo 'released!'
    ;;
  active)
    echo 'already released; skipping'
    ;;
  *)
    abort "cannot publish version with status '$status'"
  esac
fi

version_field=$(jq '{name: "version", value: .version}' < version.json)
url_field=$(jq '{name: "url", value: .download_url}' < provider.json)

jq -n "{
  version: {version: $(echo $version | jq -R .)},
  metadata: [${version_field}, ${url_field}]
}" >&3

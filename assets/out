#!/bin/sh
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source=$1

if [ -z "$source" ]; then
  echo "usage: $0 <path/to/source>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

access_token=$(jq -r '.source.access_token // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
box=$(jq -r '.source.box // ""' < $payload)
provider=$(jq -r '.source.provider // ""' < $payload)
version_file=$(jq -r '.params.version // ""' < $payload)
description_file=$(jq -r '.params.description // ""' < $payload)
url_file=$(jq -r '.params.url // ""' < $payload)
release=$(jq -r '.params.release // false' < $payload)

abort() {
  echo "$@"
  exit 1
}

curl_f() {
  curl -s -f "$@"
}

[ -n "$access_token" ] || abort "missing access_token"
[ -n "$username" ] || abort "missing username"
[ -n "$box" ] || abort "missing box"
[ -n "$provider" ] || abort "missing provider"
[ -n "$version_file" ] || abort "missing version"
[[ -z "$url_file" && "$release" = "false" ]] && abort "must provide url or release"

cd $source

[ -f "$version_file" ] || abort "version file does not exist"
[[ -z "$url_file" || -f "$url_file" ]] || abort "url file does not exist"
[[ -z "$description_file" || -f "$description_file" ]] || abort "description file does not exist"

token_param="access_token=${access_token}"

description_payload="null"
if [ -n "$description_file" ]; then
  description_payload=$(jq -s -R . < $description_file)
fi

version=$(cat $version_file)

version_payload=$(
  jq -n "{
    version: {
      version: $(jq -R . < $version_file),
      description: ${description_payload}
    }
  }"
)

echo "checking for existing version..."
curl_f -X GET https://atlas.hashicorp.com/api/v1/box/${username}/${box}?${token_param} > box.json

existing_version=$(jq -r "
  .versions[] |
    select(.version == $(jq -R . < $version_file)) |
    .version
" < box.json)

if [ -z "$existing_version" ]; then
  echo "none found; creating..."
  curl_f -X POST -H "Content-Type: application/json" https://atlas.hashicorp.com/api/v1/box/${username}/${box}/versions?${token_param} \
    -d "$version_payload" > version.json
else
  echo "version found; updating..."
  curl_f -X PUT -H "Content-Type: application/json" https://atlas.hashicorp.com/api/v1/box/${username}/${box}/version/${version}?${token_param} \
    -d "$version_payload" > version.json
fi

status=$(jq -r .status < version.json)

if [ -n "$url_file" ]; then
  echo 'publishing provider...'

  # atlas API appears to fail the POST if the provider already exists, but still
  # create a bogus provider anyway.
  #
  # so, try PUTing first, and otherwise try POST.
  {
    curl_f -X PUT https://atlas.hashicorp.com/api/v1/box/${username}/${box}/version/${version}/provider/${provider} \
      -d ${token_param} \
      -d provider[name]=${provider} \
      -d provider[url]=$(cat $url_file) \
      || \
    curl_f -X POST https://atlas.hashicorp.com/api/v1/box/${username}/${box}/version/${version}/providers \
      -d ${token_param} \
      -d provider[name]=${provider} \
      -d provider[url]=$(cat $url_file)
  } > provider.json
fi

if [ "$release" = "true" ]; then
  case $status in
  unreleased)
    # direct output to file for debugging if it fails
    curl_f -X PUT https://atlas.hashicorp.com/api/v1/box/${username}/${box}/version/${version}/release \
      -d ${token_param} > released-version.json

    echo 'released!'
    ;;
  active)
    echo 'already released; skipping'
    ;;
  *)
    abort "cannot publish version with status '$status'"
  esac
fi

version_field=$(jq '{name: "version", value: .version}' < version.json)
url_field=$(jq '{name: "url", value: .download_url}' < provider.json)

jq -n "{
  version: {version: $(echo $version | jq -R .)},
  metadata: [${version_field}, ${url_field}]
}" >&3

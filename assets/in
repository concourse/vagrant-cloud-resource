#!/bin/sh
# vim: set ft=sh

set -e -u

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

destination=$1

if [ -z "$destination" ]; then
  echo "usage: $0 <path/to/destination>" >&2
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

payload=$(mktemp /tmp/resource-in.XXXXXX)

cat > $payload <&0

access_token=$(jq -r '.source.access_token // ""' < $payload)
username=$(jq -r '.source.username // ""' < $payload)
box=$(jq -r '.source.box // ""' < $payload)
provider=$(jq -r '.source.provider // ""' < $payload)
version=$(jq -r '.version.version // ""' < $payload)
download=$(jq -r '.params.download // false' < $payload)

abort() {
  echo "$@"
  exit 1
}

curl_f() {
  curl -s -f "$@"
}

[ -n "$access_token" ] || abort "missing access_token"
[ -n "$username" ] || abort "missing username"
[ -n "$box" ] || abort "missing box"
[ -n "$provider" ] || abort "missing provider"

if [ -z "$version" ]; then
  curl_f -X GET https://atlas.hashicorp.com/api/v1/box/${username}/${box} \
    -d "access_token=${access_token}" > box.json

  provider_name=$(echo $provider | jq -R .)

  version=$(jq -r "
    .current_version |
      select(.providers | map(.name) | contains([$provider_name])) |
      .version
  " < box.json)

  if [ -z "$version" ]; then
    abort "no versions of the box available for the provider"
  fi
fi

curl_f -X GET https://atlas.hashicorp.com/api/v1/box/${username}/${box}/version/${version} \
  -d "access_token=${access_token}" > version.json

curl_f -X GET https://atlas.hashicorp.com/api/v1/box/${username}/${box}/version/${version}/provider/${provider} \
  -d "access_token=${access_token}" > provider.json

mkdir -p ${destination}

jq -r .version < version.json > ${destination}/version
jq -r .download_url < provider.json > ${destination}/url

if [ "$download" = "true" ]; then
  curl_f -L $(cat ${destination}/url) -o ${destination}/box
fi

version_field=$(jq '{name: "version", value: .version}' < version.json)
url_field=$(jq '{name: "url", value: .download_url}' < provider.json)

jq -n "{
  version: {version: $(echo $version | jq -R .)},
  metadata: [${version_field}, ${url_field}]
}" >&3
